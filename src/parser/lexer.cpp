#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define sql_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sql_create_buffer
#endif

#ifdef yy_delete_buffer
#define sql_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sql_delete_buffer
#endif

#ifdef yy_scan_buffer
#define sql_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sql_scan_buffer
#endif

#ifdef yy_scan_string
#define sql_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sql_scan_string
#endif

#ifdef yy_scan_bytes
#define sql_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sql_scan_bytes
#endif

#ifdef yy_init_buffer
#define sql_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sql_init_buffer
#endif

#ifdef yy_flush_buffer
#define sql_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sql_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sql_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sql_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sql_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sql_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sqlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sqlpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define sqlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sqlpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sqlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sqlensure_buffer_stack
#endif

#ifdef yylex
#define sqllex_ALREADY_DEFINED
#else
#define yylex sqllex
#endif

#ifdef yyrestart
#define sqlrestart_ALREADY_DEFINED
#else
#define yyrestart sqlrestart
#endif

#ifdef yylex_init
#define sqllex_init_ALREADY_DEFINED
#else
#define yylex_init sqllex_init
#endif

#ifdef yylex_init_extra
#define sqllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sqllex_init_extra
#endif

#ifdef yylex_destroy
#define sqllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sqllex_destroy
#endif

#ifdef yyget_debug
#define sqlget_debug_ALREADY_DEFINED
#else
#define yyget_debug sqlget_debug
#endif

#ifdef yyset_debug
#define sqlset_debug_ALREADY_DEFINED
#else
#define yyset_debug sqlset_debug
#endif

#ifdef yyget_extra
#define sqlget_extra_ALREADY_DEFINED
#else
#define yyget_extra sqlget_extra
#endif

#ifdef yyset_extra
#define sqlset_extra_ALREADY_DEFINED
#else
#define yyset_extra sqlset_extra
#endif

#ifdef yyget_in
#define sqlget_in_ALREADY_DEFINED
#else
#define yyget_in sqlget_in
#endif

#ifdef yyset_in
#define sqlset_in_ALREADY_DEFINED
#else
#define yyset_in sqlset_in
#endif

#ifdef yyget_out
#define sqlget_out_ALREADY_DEFINED
#else
#define yyget_out sqlget_out
#endif

#ifdef yyset_out
#define sqlset_out_ALREADY_DEFINED
#else
#define yyset_out sqlset_out
#endif

#ifdef yyget_leng
#define sqlget_leng_ALREADY_DEFINED
#else
#define yyget_leng sqlget_leng
#endif

#ifdef yyget_text
#define sqlget_text_ALREADY_DEFINED
#else
#define yyget_text sqlget_text
#endif

#ifdef yyget_lineno
#define sqlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sqlget_lineno
#endif

#ifdef yyset_lineno
#define sqlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sqlset_lineno
#endif

#ifdef yyget_column
#define sqlget_column_ALREADY_DEFINED
#else
#define yyget_column sqlget_column
#endif

#ifdef yyset_column
#define sqlset_column_ALREADY_DEFINED
#else
#define yyset_column sqlset_column
#endif

#ifdef yywrap
#define sqlwrap_ALREADY_DEFINED
#else
#define yywrap sqlwrap
#endif

/* %endif */

#ifdef yyget_lval
#define sqlget_lval_ALREADY_DEFINED
#else
#define yyget_lval sqlget_lval
#endif

#ifdef yyset_lval
#define sqlset_lval_ALREADY_DEFINED
#else
#define yyset_lval sqlset_lval
#endif

#ifdef yyget_lloc
#define sqlget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc sqlget_lloc
#endif

#ifdef yyset_lloc
#define sqlset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc sqlset_lloc
#endif

#ifdef yyalloc
#define sqlalloc_ALREADY_DEFINED
#else
#define yyalloc sqlalloc
#endif

#ifdef yyrealloc
#define sqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc sqlrealloc
#endif

#ifdef yyfree
#define sqlfree_ALREADY_DEFINED
#else
#define yyfree sqlfree
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define sqlwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
<<<<<<< HEAD
#define YY_NUM_RULES 185
#define YY_END_OF_BUFFER 186
=======
#define YY_NUM_RULES 186
#define YY_END_OF_BUFFER 187
>>>>>>> upstream/main
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
<<<<<<< HEAD
static const flex_int16_t yy_accept[640] =
    {   0,
        0,    0,  182,  182,  186,  184,    1,    1,  184,  184,
      174,  180,  174,  174,  177,  174,  174,  174,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  182,  183,    1,  170,    0,  177,  176,
      175,  172,  171,  169,  173,  179,  179,  179,    6,  179,
      179,  179,  179,  179,   19,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
       73,   74,   84,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  179,  179,  179,  179,  106,  179,  108,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  147,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      182,  181,  178,  175,    0,    2,  179,  179,    5,    8,
        7,  179,  179,   11,  179,  179,   14,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,   38,  179,
      179,  179,  179,  179,  179,  179,  179,  179,   51,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,   80,  179,   86,  179,  179,  179,  179,   91,  179,
      179,  179,  179,  179,  179,  103,  179,  104,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      123,  179,  179,  179,  179,  179,  179,  179,  179,  132,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  156,  179,  179,  179,  179,  179,  179,
      179,  179,  179,    0,  175,  179,  179,  179,  179,  179,
       15,  179,  179,  179,   20,   21,  179,  179,  179,  179,
      179,  179,   30,  179,  179,   33,   36,   39,  179,  179,
      179,  179,  179,   47,  179,  179,   48,   49,  179,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
       63,   64,  179,  179,  179,  179,  179,   70,  179,  179,
      179,  179,  179,   83,   85,   87,   88,  179,   90,  179,
       92,   94,  179,  179,  179,  179,  179,  102,  179,  179,
      179,  179,  111,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  124,  179,  179,  179,  179,  179,  179,  179,
      135,  179,  179,  179,  179,  142,  143,  144,  179,  179,
      150,  179,  179,  179,  179,  155,  179,  179,  179,  179,
      162,  164,  179,  166,  167,    3,  179,  179,  179,  179,
       16,  179,  179,   22,  179,  179,  179,  179,  179,  179,

       32,  179,  179,  179,  179,  179,  179,   46,  179,  179,
      179,  179,  179,  179,  179,  179,  179,   58,   59,   60,
      179,  179,  179,  179,   67,  179,  179,   71,  179,   75,
       77,  179,  179,  179,   89,  179,   95,  179,  179,   99,
      179,  179,  179,  109,  110,  179,  179,  114,  179,  179,
      179,  179,  179,  179,  122,  125,  179,  179,  179,  179,
      179,  179,  179,  179,  138,  179,  179,  179,  179,  151,
      179,  179,  153,  179,  179,  179,  179,  163,  165,  168,
      179,  179,   10,   12,   17,  179,   18,   23,  179,   25,
      179,   29,   31,  179,  179,  179,  179,   44,  179,  179,

       41,  179,   52,  179,   55,  179,   57,  179,   61,  179,
       65,   66,   68,   69,  179,  179,   78,  179,  179,  179,
      179,   96,   97,  100,  179,  105,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  127,  128,  179,  130,
      179,  179,  137,  139,  140,  179,  179,  179,  152,  154,
      157,  179,  179,  161,    4,    9,   13,  179,   26,   27,
       28,  179,  179,   42,   43,  179,  179,  179,   54,   56,
       53,  179,   72,   76,   79,  179,  179,   93,   98,  101,
      179,  179,  179,  115,  116,  117,  118,  179,  121,  179,
      129,  133,  131,  179,  179,  179,  146,  179,  160,  179,

      179,   34,   37,  179,   40,  179,   62,  179,   82,  107,
      112,  113,  119,  179,  126,  134,  136,  179,  179,  179,
      158,  179,   35,   45,   50,   81,  179,  179,  145,  179,
      159,   24,  120,  179,  179,  141,  148,  149,    0
=======
static const flex_int16_t yy_accept[646] =
    {   0,
        0,    0,  183,  183,  187,  185,    1,    1,  185,  185,
      175,  181,  175,  175,  178,  175,  175,  175,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  183,  184,    1,  171,    0,  178,  177,
      176,  173,  172,  170,  174,  180,  180,  180,    6,  180,
      180,  180,  180,  180,   19,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
       74,   75,   85,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  107,  180,  109,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  148,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      183,  182,  179,  176,    0,    2,  180,  180,    5,    8,
        7,  180,  180,   11,  180,  180,   14,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,   39,
      180,  180,  180,  180,  180,  180,  180,  180,  180,   52,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,   81,  180,   87,  180,  180,  180,  180,   92,
      180,  180,  180,  180,  180,  180,  104,  180,  105,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  124,  180,  180,  180,  180,  180,  180,  180,  180,
      133,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  157,  180,  180,  180,  180,  180,
      180,  180,  180,  180,    0,  176,  180,  180,  180,  180,
      180,   15,  180,  180,  180,   20,   21,  180,  180,  180,
      180,  180,  180,  180,   31,  180,  180,   34,   37,   40,
      180,  180,  180,  180,  180,   48,  180,  180,   49,   50,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,   64,   65,  180,  180,  180,  180,  180,   71,
      180,  180,  180,  180,  180,   84,   86,   88,   89,  180,
       91,  180,   93,   95,  180,  180,  180,  180,  180,  103,
      180,  180,  180,  180,  112,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  125,  180,  180,  180,  180,  180,
      180,  180,  136,  180,  180,  180,  180,  143,  144,  145,
      180,  180,  151,  180,  180,  180,  180,  156,  180,  180,
      180,  180,  163,  165,  180,  167,  168,    3,  180,  180,
      180,  180,   16,  180,  180,  180,   23,  180,  180,  180,

      180,  180,  180,   33,  180,  180,  180,  180,  180,  180,
       47,  180,  180,  180,  180,  180,  180,  180,  180,  180,
       59,   60,   61,  180,  180,  180,  180,   68,  180,  180,
       72,  180,   76,   78,  180,  180,  180,   90,  180,   96,
      180,  180,  100,  180,  180,  180,  110,  111,  180,  180,
      115,  180,  180,  180,  180,  180,  180,  123,  126,  180,
      180,  180,  180,  180,  180,  180,  180,  139,  180,  180,
      180,  180,  152,  180,  180,  154,  180,  180,  180,  180,
      164,  166,  169,  180,  180,   10,   12,   17,  180,   18,
      180,   24,  180,   26,  180,   30,   32,  180,  180,  180,

      180,   45,  180,  180,   42,  180,   53,  180,   56,  180,
       58,  180,   62,  180,   66,   67,   69,   70,  180,  180,
       79,  180,  180,  180,  180,   97,   98,  101,  180,  106,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      128,  129,  180,  131,  180,  180,  138,  140,  141,  180,
      180,  180,  153,  155,  158,  180,  180,  162,    4,    9,
       13,  180,  180,   27,   28,   29,  180,  180,   43,   44,
      180,  180,  180,   55,   57,   54,  180,   73,   77,   80,
      180,  180,   94,   99,  102,  180,  180,  180,  116,  117,
      118,  119,  180,  122,  180,  130,  134,  132,  180,  180,

      180,  147,  180,  161,  180,   22,  180,   35,   38,  180,
       41,  180,   63,  180,   83,  108,  113,  114,  120,  180,
      127,  135,  137,  180,  180,  180,  159,  180,   36,   46,
       51,   82,  180,  180,  146,  180,  160,   25,  121,  180,
      180,  142,  149,  150,    0
>>>>>>> upstream/main
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,    6,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    1,    2,    1,    3,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

<<<<<<< HEAD
static const flex_int16_t yy_base[644] =
    {   0,
        0,    0,  182,  177,  180, 1292,   65,   67,  140,    0,
     1292, 1292,  140,  138,   62,   61,  133,  128,   50,   92,
      144,  189,   54,  234,   53,  101,  132,   48,   67,  145,
       72,  140,  277,  325,   55,  191,  197,  370,  195,  165,
       74,    0,   79,    0,  132,   85, 1292,  133,   83,  126,
       80, 1292, 1292, 1292, 1292,    0,  136,  211,  200,   68,
      237,  105,  230,  124,    0,  117,  121,  140,  247,  243,
      245,  302,  176,  178,  209,  231,  251,  263,  413,  257,
      288,  256,  314,  292,  274,  285,  290,  316,  298,  316,
        0,  343,    0,  315,  303,  331,  355,  338,  344,  353,

      340,  345,  345,  360,  370,  377,    0,  367,  390,  377,
      379,  376,  387,  399,  408,  414,  397,  424,  420,  408,
      460,  417,  436,  438,  439,  441,  437,  457,    0,  456,
      439,  447,  476,  453,  475,  470,  469,  471,  463,  485,
        0, 1292, 1292,  512,  124,    0,  486,  483,    0,    0,
        0,  473,  493,  492,  513,  499,    0,  513,  516,  510,
      522,  514,  511,  522,  505,  530,  514,  536,  515,  530,
      539,  560,  542,  527,  547,  534,  551,  554,    0,  565,
      568,  554,  563,  561,  562,  581,  565,  572,  580,  575,
      577,  581,  589,  572,  585,  591,  581,  596,  598,  599,

      605,  608,  605,    0,  604,  620,  618,  624,  623,  626,
      631,  616,  615,  618,  618,    0,  629,  624,  635,  640,
      642,  640,  630,  648,  641,  632,  642,  651,  661,  655,
        0,  666,  671,  669,  665,  671,  674,  683,  670,    0,
      667,  680,  675,  683,  677,  677,  684,  694,  676,  688,
      698,  692,  710,    0,  698,  714,  700,  724,  711,  709,
      723,  727,  722,  121,   89,  724,  718,  739,  732,  746,
        0,  738,  745,  746,    0,    0,  741,  741,  750,  743,
      756,  752,    0,  743,  746,  764,  752,    0,  762,  760,
      765,  773,  786,    0,  780,  779,    0,    0,  790,  779,

      775,  777,  797,  782,  800,  798,  784,  797,  805,  794,
        0,    0,  794,  809,  795,  801,  812,  800,  811,  802,
      811,  817,  832,    0,    0,    0,    0,  820,    0,  838,
        0,    0,  835,  836,  828,  841,  833,    0,  847,  841,
      837,  839,    0,  849,  847,  840,  854,  862,  863,  856,
      864,  864,    0,  851,  865,  877,  869,  888,  891,  886,
        0,  885,  880,  897,  888,    0,    0,  885,  896,  887,
        0,  894,  888,  891,  905,    0,  908,  906,  914,  902,
      899,    0,  914,    0,  904,    0,  899,  922,  908,  918,
      918,  942,  929,    0,  943,  946,  937,  950,  949,  952,

        0,  957,  950,  959,  950,  958,  956,    0,  952,  962,
      964,  949,  951,  953,  964,  957,  976,    0,    0,    0,
      961,  977,  974,  979,    0,  990,  983,    0,  988,  998,
        0,  985, 1002,  991,    0, 1010,    0,  999, 1009,  997,
     1016,  999, 1011,    0,    0, 1018, 1013,    0, 1008, 1007,
     1008, 1015, 1013, 1028,    0,    0, 1022, 1028, 1038, 1031,
     1031, 1040, 1047, 1052, 1040, 1043, 1044, 1051, 1065,    0,
     1062, 1063,    0, 1051, 1070, 1071, 1056,    0,    0,    0,
     1070, 1062,    0,    0,    0, 1063,    0,    0, 1059, 1061,
     1061, 1066,    0, 1068, 1076, 1078, 1076,    0, 1079, 1102,

        0, 1100,    0, 1105,    0, 1097,    0, 1093,    0, 1101,
        0,    0,    0,    0, 1098, 1100,    0, 1102, 1116, 1121,
     1112,    0, 1106,    0, 1115,    0, 1102, 1128, 1116, 1117,
     1128, 1109, 1130, 1119, 1122, 1134,    0, 1125, 1130,    0,
     1139, 1145,    0,    0, 1162, 1163, 1145, 1164,    0,    0,
        0, 1151, 1160,    0,    0,    0,    0, 1164,    0,    0,
        0, 1169, 1170,    0,    0, 1171, 1158, 1165,    0,    0,
        0, 1161,    0,    0,    0, 1179, 1171,    0,    0,    0,
     1179, 1173, 1182,    0,    0,    0, 1169, 1180,    0, 1173,
        0, 1176,    0, 1177, 1180, 1191,    0, 1187,    0, 1208,

     1202, 1199,    0, 1201,    0, 1214,    0, 1203,    0,    0,
        0,    0,    0, 1221,    0,    0,    0, 1209, 1212, 1220,
     1211, 1218,    0,    0,    0,    0, 1214, 1234,    0, 1221,
        0,    0,    0, 1212, 1224,    0, 1220,    0, 1292, 1279,
     1283,   79, 1287
    } ;

static const flex_int16_t yy_def[644] =
    {   0,
      639,    1,  640,  640,  639,  639,  639,  639,  639,  641,
      639,  639,  639,  639,  639,  639,  639,  639,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  643,  639,  639,  639,  641,  639,  639,
      639,  639,  639,  639,  639,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      643,  639,  639,  639,  639,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  639,  639,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,    0,  639,
      639,  639,  639
    } ;

static const flex_int16_t yy_nxt[1359] =
=======
static const flex_int16_t yy_base[650] =
    {   0,
        0,    0,  182,  177,  180, 1300,   65,   67,  140,    0,
     1300, 1300,  140,  138,   62,   61,  133,  128,   50,   92,
      144,  189,   54,  234,   53,  101,  132,   48,   67,  145,
       72,  140,  277,  325,   55,  191,  197,  370,  195,  165,
       74,    0,   79,    0,  132,   85, 1300,  133,   83,  126,
       80, 1300, 1300, 1300, 1300,    0,  136,  211,  200,   68,
      237,  105,  230,  124,    0,  231,  115,  124,  247,  243,
      245,  302,  139,  174,  184,  234,  265,  265,  413,  262,
      288,  271,  314,  292,  285,  297,  295,  318,  302,  317,
        0,  343,    0,  319,  312,  339,  355,  342,  349,  353,

      345,  351,  360,  362,  371,  381,    0,  374,  393,  379,
      381,  378,  392,  408,  422,  406,  390,  418,  416,  402,
      464,  417,  433,  435,  437,  427,  437,  459,    0,  454,
      444,  458,  465,  468,  467,  478,  481,  482,  468,  489,
        0, 1300, 1300,  519,  124,    0,  486,  481,    0,    0,
        0,  472,  487,  492,  523,  495,    0,  503,  522,  518,
      507,  525,  517,  514,  525,  508,  534,  518,  538,  521,
      532,  543,  554,  542,  529,  548,  545,  568,  570,    0,
      573,  576,  561,  569,  564,  564,  584,  568,  576,  584,
      579,  581,  585,  593,  575,  588,  594,  581,  598,  599,

      608,  610,  612,  614,    0,  609,  627,  624,  629,  626,
      629,  634,  619,  618,  621,  622,    0,  634,  628,  639,
      644,  645,  643,  633,  648,  643,  633,  651,  656,  665,
      664,    0,  671,  678,  675,  670,  674,  677,  686,  673,
        0,  670,  683,  679,  687,  681,  681,  688,  698,  679,
      691,  701,  706,  706,    0,  697,  708,  704,  732,  716,
      714,  726,  734,  725,  121,   89,  727,  721,  742,  735,
      750,    0,  742,  749,  750,    0,    0,  744,  746,  746,
      754,  747,  760,  756,    0,  746,  756,  775,  759,    0,
      776,  769,  771,  781,  794,    0,  787,  785,    0,    0,

      794,  783,  779,  781,  802,  787,  806,  803,  789,  802,
      810,  799,    0,    0,  798,  813,  799,  805,  815,  810,
      822,  809,  825,  826,  841,    0,    0,    0,    0,  825,
        0,  846,    0,    0,  842,  842,  832,  845,  836,    0,
      850,  844,  843,  844,    0,  854,  852,  845,  859,  866,
      867,  860,  868,  874,    0,  854,  876,  884,  883,  893,
      899,  894,    0,  892,  886,  901,  892,    0,    0,  889,
      900,  892,    0,  899,  894,  896,  910,    0,  913,  911,
      919,  906,  903,    0,  918,    0,  908,    0,  902,  932,
      919,  925,  932,  951,  935,  941,    0,  952,  955,  945,

      957,  954,  957,    0,  962,  956,  966,  957,  965,  962,
        0,  958,  968,  970,  955,  956,  958,  972,  962,  988,
        0,    0,    0,  973,  990,  991,  994,    0, 1000,  992,
        0,  997, 1007,    0,  993, 1009,  997,    0, 1014,    0,
     1004, 1016, 1004, 1023, 1005, 1017,    0,    0, 1024, 1019,
        0, 1014, 1012, 1013, 1023, 1018, 1040,    0,    0, 1034,
     1041, 1055, 1046, 1041, 1049, 1056, 1061, 1048, 1050, 1049,
     1056, 1070,    0, 1068, 1070,    0, 1058, 1077, 1077, 1062,
        0,    0,    0, 1076, 1068,    0,    0,    0, 1069,    0,
     1077,    0, 1065, 1070, 1070, 1080,    0, 1082, 1090, 1101,

     1094,    0, 1095, 1115,    0, 1110,    0, 1115,    0, 1107,
        0, 1102,    0, 1109,    0,    0,    0,    0, 1104, 1106,
        0, 1109, 1124, 1130, 1120,    0, 1114,    0, 1122,    0,
     1109, 1135, 1123, 1124, 1134, 1118, 1139, 1133, 1136, 1148,
        0, 1148, 1148,    0, 1155, 1158,    0,    0, 1172, 1173,
     1155, 1173,    0,    0,    0, 1159, 1166,    0,    0,    0,
        0, 1160, 1172,    0,    0,    0, 1178, 1180,    0,    0,
     1181, 1167, 1174,    0,    0,    0, 1169,    0,    0,    0,
     1187, 1179,    0,    0,    0, 1187, 1181, 1192,    0,    0,
        0, 1179, 1198,    0, 1189,    0, 1192,    0, 1201, 1204,

     1210,    0, 1206,    0, 1222,    0, 1213, 1210,    0, 1212,
        0, 1224,    0, 1212,    0,    0,    0,    0,    0, 1228,
        0,    0,    0, 1217, 1221, 1230, 1221, 1227,    0,    0,
        0,    0, 1223, 1242,    0, 1229,    0,    0,    0, 1220,
     1232,    0, 1228,    0, 1300, 1287, 1291,   79, 1295
    } ;

static const flex_int16_t yy_def[650] =
    {   0,
      645,    1,  646,  646,  645,  645,  645,  645,  645,  647,
      645,  645,  645,  645,  645,  645,  645,  645,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  649,  645,  645,  645,  647,  645,  645,
      645,  645,  645,  645,  645,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      649,  645,  645,  645,  645,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  645,  645,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,    0,  645,  645,  645,  645
    } ;

static const flex_int16_t yy_nxt[1367] =
>>>>>>> upstream/main
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   42,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   42,   46,   46,   46,   46,
       51,   49,   52,   53,   57,   94,   58,   85,   76,   77,
       78,   59,   56,   86,   95,  100,   46,   46,  116,  144,
       79,   51,   49,  101,  138,  139,  140,  145,  266,  102,

      152,   57,   94,   58,   85,   76,   77,   78,   59,   60,
       86,   95,  100,   61,   87,  116,   62,   79,   88,   63,
      101,  138,  139,  140,  145,   64,  102,  152,   89,   65,
      266,  265,  155,  266,   90,   50,   60,  143,  142,   55,
       61,   87,  158,   62,   54,   88,   63,   50,  161,   49,
       91,   47,   64,  103,  162,   89,   65,   66,   92,  155,
      146,   90,   96,   93,   67,   68,   97,  104,  147,  158,
<<<<<<< HEAD
      161,   69,   98,  105,   70,  159,   99,   91,  135,  639,
      103,  160,  136,   45,   66,   92,  137,  146,   45,   96,
       93,   67,   68,   97,  104,  147,  639,  161,   69,   98,

      105,   70,   71,   99,  117,  135,   72,  174,  118,  136,
       73,  175,  119,  137,  121,  150,   74,  122,  120,   75,
      639,  131,  123,  132,  148,  124,  133,  149,  134,   71,
      639,  117,  151,   72,  174,  118,  176,   73,  175,  119,
      639,  121,  150,   74,  122,  120,   75,   80,  131,  123,
      132,  148,  124,  133,  149,  134,  153,  156,   81,  151,
      166,   82,  177,  176,   83,  178,  157,   84,  639,  154,
      167,  162,  163,  164,   80,  165,  639,  168,  639,  179,
      639,  185,  169,  153,  156,   81,  188,  166,   82,  177,
      639,   83,  178,  157,   84,  106,  154,  167,  162,  163,

      164,  193,  165,  107,  168,  108,  179,  109,  185,  169,
      110,  639,  194,  188,  639,  186,  191,  170,  639,  639,
      171,  187,  106,  192,  195,  639,  172,  189,  193,  196,
      107,  197,  108,  173,  109,  198,  203,  110,  111,  194,
      204,  190,  186,  191,  170,  112,  113,  171,  187,  205,
      192,  195,  114,  172,  189,  115,  196,  209,  197,  199,
      173,  210,  198,  203,  639,  111,  213,  204,  190,  200,
      639,  214,  112,  113,  201,  202,  205,  215,  206,  114,
      207,  208,  115,  125,  209,  211,  199,  126,  210,  212,
      127,  128,  216,  213,  217,  218,  200,  129,  214,  219,

      130,  201,  202,  639,  215,  206,  220,  207,  208,  221,
      125,  222,  211,  223,  126,  224,  212,  127,  128,  216,
      225,  217,  218,  226,  129,  227,  219,  130,  180,  228,
      181,  230,  231,  220,  182,  229,  221,  232,  222,  233,
      223,  183,  224,  234,  241,  184,  639,  225,  639,  242,
      226,  243,  227,  244,  247,  180,  228,  181,  230,  231,
      252,  182,  229,  253,  232,  639,  233,  245,  183,  250,
      234,  241,  184,  235,  256,  236,  242,  246,  243,  237,
      244,  247,  248,  249,  238,  259,  260,  252,  261,  251,
      253,  239,  240,  254,  245,  262,  250,  255,  263,  257,

      235,  256,  236,  266,  246,  258,  237,  267,  268,  248,
      249,  238,  259,  260,  269,  261,  251,  270,  239,  240,
      254,  144,  262,  273,  255,  263,  257,  271,  272,  145,
      266,  274,  258,  275,  267,  268,  277,  278,  279,  281,
      282,  269,  283,  284,  270,  285,  288,  280,  276,  286,
      273,  289,  290,  287,  271,  272,  145,  294,  274,  295,
      275,  296,  297,  277,  278,  279,  281,  282,  298,  283,
      284,  299,  285,  288,  280,  276,  286,  291,  289,  290,
      287,  292,  300,  301,  294,  302,  295,  303,  296,  297,
      304,  305,  293,  306,  307,  298,  308,  309,  299,  310,

      311,  312,  313,  314,  291,  315,  316,  317,  292,  300,
      301,  318,  302,  319,  303,  320,  321,  304,  305,  293,
      306,  307,  322,  308,  309,  323,  310,  311,  312,  313,
      314,  325,  315,  316,  317,  324,  326,  327,  318,  328,
      319,  329,  320,  321,  330,  332,  333,  334,  335,  322,
      336,  337,  323,  338,  331,  339,  340,  341,  325,  342,
      343,  344,  324,  326,  327,  345,  328,  346,  329,  347,
      348,  330,  332,  333,  334,  335,  349,  336,  337,  350,
      338,  331,  339,  340,  341,  352,  342,  343,  344,  351,
      353,  354,  345,  355,  346,  356,  347,  348,  357,  358,

      359,  360,  361,  349,  362,  363,  350,  364,  365,  366,
      367,  368,  352,  369,  370,  371,  351,  353,  354,  372,
      355,  373,  356,  374,  375,  357,  358,  359,  360,  361,
      376,  362,  363,  377,  364,  365,  366,  367,  368,  378,
      369,  370,  371,  380,  381,  379,  372,  384,  373,  382,
      374,  375,  385,  383,  386,  387,  388,  376,  389,  390,
      377,  391,  392,  393,  394,  395,  378,  396,  397,  398,
      380,  381,  379,  399,  384,  400,  382,  401,  402,  385,
      383,  386,  387,  388,  403,  389,  390,  404,  391,  392,
      393,  394,  395,  405,  396,  397,  398,  406,  407,  408,

      399,  409,  400,  410,  401,  402,  411,  412,  413,  414,
      415,  403,  416,  417,  404,  418,  419,  420,  421,  422,
      405,  423,  424,  425,  406,  407,  408,  426,  409,  427,
      410,  428,  429,  411,  412,  413,  414,  415,  430,  416,
      417,  431,  418,  419,  420,  421,  422,  432,  423,  424,
      425,  433,  435,  436,  426,  437,  427,  438,  428,  429,
      439,  440,  434,  441,  442,  430,  443,  444,  431,  445,
      446,  447,  448,  449,  432,  450,  451,  452,  433,  435,
      436,  453,  437,  456,  438,  454,  457,  439,  440,  434,
      441,  442,  458,  443,  444,  459,  445,  446,  447,  448,

      449,  455,  450,  451,  452,  460,  461,  462,  453,  463,
      456,  464,  454,  457,  465,  466,  467,  468,  469,  458,
      470,  471,  459,  472,  473,  474,  475,  476,  455,  477,
      478,  479,  460,  461,  462,  480,  463,  481,  464,  482,
      483,  465,  466,  467,  468,  469,  484,  470,  471,  485,
      472,  473,  474,  475,  476,  486,  477,  478,  479,  487,
      488,  489,  480,  490,  481,  491,  482,  483,  492,  493,
      494,  495,  496,  484,  497,  498,  485,  499,  500,  501,
      502,  503,  486,  504,  505,  506,  487,  488,  489,  507,
      490,  508,  491,  509,  510,  492,  493,  494,  495,  496,

      511,  497,  498,  512,  499,  500,  501,  502,  503,  513,
      504,  505,  506,  514,  515,  516,  507,  517,  508,  518,
      509,  510,  519,  521,  522,  520,  523,  511,  524,  525,
      512,  526,  527,  528,  529,  530,  513,  531,  532,  533,
      514,  515,  516,  534,  517,  535,  518,  536,  537,  519,
      521,  522,  520,  523,  538,  524,  525,  539,  526,  527,
      528,  529,  530,  540,  531,  532,  533,  541,  542,  543,
      534,  544,  535,  545,  536,  537,  546,  547,  548,  549,
      550,  538,  551,  552,  539,  553,  554,  555,  556,  557,
      540,  558,  559,  560,  541,  542,  543,  561,  544,  562,
=======
      175,   69,   98,  105,   70,  161,   99,   91,  135,  645,
      103,  162,  136,   45,   66,   92,  137,  146,   45,   96,
       93,   67,   68,   97,  104,  147,  645,  175,   69,   98,

      105,   70,   71,   99,  117,  135,   72,  176,  118,  136,
       73,  177,  119,  137,  121,  150,   74,  122,  120,   75,
      645,  131,  123,  132,  148,  124,  133,  149,  134,   71,
      645,  117,  151,   72,  176,  118,  645,   73,  177,  119,
      645,  121,  150,   74,  122,  120,   75,   80,  131,  123,
      132,  148,  124,  133,  149,  134,  153,  156,   81,  151,
      167,   82,  159,  160,   83,  178,  157,   84,  645,  154,
      168,  163,  164,  165,   80,  166,  645,  169,  645,  179,
      645,  180,  170,  153,  156,   81,  186,  167,   82,  159,
      160,   83,  178,  157,   84,  106,  154,  168,  163,  164,

      165,  189,  166,  107,  169,  108,  179,  109,  180,  170,
      110,  645,  194,  186,  645,  187,  192,  171,  645,  645,
      172,  188,  106,  193,  195,  645,  173,  190,  189,  196,
      107,  197,  108,  174,  109,  198,  199,  110,  111,  194,
      204,  191,  187,  192,  171,  112,  113,  172,  188,  205,
      193,  195,  114,  173,  190,  115,  196,  206,  197,  200,
      174,  210,  198,  199,  645,  111,  211,  204,  191,  201,
      645,  214,  112,  113,  202,  203,  205,  215,  207,  114,
      208,  209,  115,  125,  206,  212,  200,  126,  210,  213,
      127,  128,  216,  211,  217,  218,  201,  129,  214,  219,

      130,  202,  203,  645,  215,  207,  220,  208,  209,  221,
      125,  222,  212,  223,  126,  224,  213,  127,  128,  216,
      225,  217,  218,  231,  129,  232,  219,  130,  181,  226,
      182,  233,  227,  220,  183,  234,  221,  235,  222,  228,
      223,  184,  224,  229,  242,  185,  243,  225,  244,  230,
      231,  245,  232,  246,  248,  181,  226,  182,  233,  227,
      645,  183,  234,  247,  235,  253,  228,  251,  184,  645,
      229,  242,  185,  243,  254,  244,  230,  236,  245,  237,
      246,  248,  255,  238,  249,  250,  256,  252,  239,  257,
      247,  258,  253,  260,  251,  240,  241,  259,  261,  262,

      263,  254,  264,  267,  236,  268,  237,  269,  270,  255,
      238,  249,  250,  256,  252,  239,  257,  271,  258,  274,
      260,  275,  240,  241,  259,  261,  262,  263,  144,  264,
      267,  278,  268,  279,  269,  270,  145,  272,  273,  276,
      280,  281,  283,  284,  271,  285,  274,  286,  275,  287,
      282,  288,  290,  291,  277,  289,  292,  296,  278,  645,
      279,  297,  298,  145,  272,  273,  276,  280,  281,  283,
      284,  293,  285,  299,  286,  294,  287,  282,  288,  290,
      291,  277,  289,  292,  296,  300,  295,  301,  297,  298,
      302,  303,  304,  305,  307,  308,  306,  309,  293,  310,

      299,  311,  294,  312,  313,  314,  315,  316,  317,  318,
      319,  320,  300,  295,  301,  321,  322,  302,  303,  304,
      305,  307,  308,  306,  309,  323,  310,  324,  311,  325,
      312,  313,  314,  315,  316,  317,  318,  319,  320,  326,
      327,  328,  321,  322,  329,  330,  331,  332,  334,  335,
      336,  337,  323,  338,  324,  339,  325,  333,  340,  341,
      342,  343,  344,  345,  346,  347,  326,  327,  328,  348,
      349,  329,  330,  331,  332,  334,  335,  336,  337,  350,
      338,  351,  339,  352,  333,  340,  341,  342,  343,  344,
      345,  346,  347,  353,  354,  355,  348,  349,  356,  357,

      358,  359,  360,  361,  362,  363,  350,  364,  351,  365,
      352,  366,  367,  368,  369,  370,  371,  372,  373,  376,
      353,  354,  355,  377,  378,  356,  357,  358,  359,  360,
      361,  362,  363,  374,  364,  375,  365,  379,  366,  367,
      368,  369,  370,  371,  372,  373,  376,  380,  382,  383,
      377,  378,  384,  381,  386,  387,  385,  388,  389,  390,
      374,  391,  375,  392,  379,  393,  394,  395,  396,  397,
      398,  399,  400,  401,  380,  382,  383,  402,  403,  384,
      381,  386,  387,  385,  388,  389,  390,  404,  391,  405,
      392,  406,  393,  394,  395,  396,  397,  398,  399,  400,

      401,  407,  408,  409,  402,  403,  410,  411,  412,  413,
      414,  415,  416,  417,  404,  418,  405,  419,  406,  420,
      421,  422,  423,  424,  425,  426,  427,  428,  407,  408,
      409,  429,  430,  410,  411,  412,  413,  414,  415,  416,
      417,  431,  418,  432,  419,  433,  420,  421,  422,  423,
      424,  425,  426,  427,  428,  434,  435,  438,  429,  430,
      436,  439,  440,  441,  442,  443,  444,  445,  431,  446,
      432,  437,  433,  447,  448,  449,  450,  451,  452,  453,
      454,  455,  434,  435,  438,  456,  459,  436,  439,  440,
      441,  442,  443,  444,  445,  457,  446,  460,  437,  461,

      447,  448,  449,  450,  451,  452,  453,  454,  455,  462,
      463,  458,  456,  459,  464,  465,  466,  467,  468,  469,
      470,  471,  457,  472,  460,  473,  461,  474,  475,  476,
      477,  478,  479,  480,  481,  482,  462,  463,  458,  483,
      484,  464,  465,  466,  467,  468,  469,  470,  471,  485,
      472,  486,  473,  487,  474,  475,  476,  477,  478,  479,
      480,  481,  482,  488,  489,  490,  483,  484,  491,  492,
      493,  494,  495,  496,  497,  498,  485,  499,  486,  500,
      487,  501,  502,  503,  504,  505,  506,  507,  508,  509,
      488,  489,  490,  510,  511,  491,  492,  493,  494,  495,

      496,  497,  498,  512,  499,  513,  500,  514,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  515,  516,  517,
      510,  511,  518,  519,  520,  521,  522,  525,  523,  526,
      512,  524,  513,  527,  514,  528,  529,  530,  531,  532,
      533,  534,  535,  536,  515,  516,  517,  537,  538,  518,
      519,  520,  521,  522,  525,  523,  526,  539,  524,  540,
      527,  541,  528,  529,  530,  531,  532,  533,  534,  535,
      536,  542,  543,  544,  537,  538,  545,  546,  547,  548,
      549,  550,  551,  552,  539,  553,  540,  554,  541,  555,
      556,  557,  558,  559,  560,  561,  562,  563,  542,  543,
>>>>>>> upstream/main

      544,  564,  565,  545,  546,  547,  548,  549,  550,  551,
      552,  566,  553,  567,  554,  568,  555,  556,  557,  558,
      559,  560,  561,  562,  563,  569,  570,  571,  564,  565,
      572,  573,  574,  575,  576,  577,  578,  579,  566,  580,
      567,  581,  568,  582,  583,  584,  585,  586,  587,  588,
      589,  590,  569,  570,  571,  591,  592,  572,  573,  574,
      575,  576,  577,  578,  579,  593,  580,  594,  581,  595,
      582,  583,  584,  585,  586,  587,  588,  589,  590,  596,
      597,  598,  591,  592,  599,  600,  601,  602,  603,  604,
      605,  606,  593,  607,  594,  608,  595,  609,  610,  611,

<<<<<<< HEAD
      613,  614,  595,  596,  597,  615,  598,  616,  599,  617,
      618,  600,  601,  602,  603,  604,  619,  605,  606,  620,
      607,  608,  609,  610,  611,  621,  612,  613,  614,  622,
      623,  624,  615,  625,  616,  626,  617,  618,  627,  628,
      629,  630,  631,  619,  632,  633,  620,  634,  635,  636,
      637,  638,  621,  639,  639,  639,  622,  623,  624,  639,
      625,  639,  626,  639,  639,  627,  628,  629,  630,  631,
      639,  632,  633,  639,  634,  635,  636,  637,  638,   44,
       44,   44,   44,   48,  639,   48,   48,  141,  141,  639,
      141,    5,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639
    } ;

static const flex_int16_t yy_chk[1359] =
=======
      612,  613,  614,  615,  616,  617,  596,  597,  598,  618,
      619,  599,  600,  601,  602,  603,  604,  605,  606,  620,
      607,  621,  608,  622,  609,  610,  611,  612,  613,  614,
      615,  616,  617,  623,  624,  625,  618,  619,  626,  627,
      628,  629,  630,  631,  632,  633,  620,  634,  621,  635,
      622,  636,  637,  638,  639,  640,  641,  642,  643,  644,
      623,  624,  625,  645,  645,  626,  627,  628,  629,  630,
      631,  632,  633,  645,  634,  645,  635,  645,  636,  637,
      638,  639,  640,  641,  642,  643,  644,   44,   44,   44,
       44,   48,  645,   48,   48,  141,  141,  645,  141,    5,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645
    } ;

static const flex_int16_t yy_chk[1367] =
>>>>>>> upstream/main
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    7,    8,    8,
       15,   15,   16,   16,   19,   28,   19,   25,   23,   23,
<<<<<<< HEAD
       23,   19,  642,   25,   29,   31,   46,   46,   35,   51,
       23,   49,   49,   31,   41,   41,   43,   51,  265,   31,
=======
       23,   19,  648,   25,   29,   31,   46,   46,   35,   51,
       23,   49,   49,   31,   41,   41,   43,   51,  266,   31,
>>>>>>> upstream/main

       60,   19,   28,   19,   25,   23,   23,   23,   19,   20,
       25,   29,   31,   20,   26,   35,   20,   23,   26,   20,
       31,   41,   41,   43,   51,   20,   31,   60,   26,   20,
      265,  145,   62,  145,   26,   50,   20,   48,   45,   18,
       20,   26,   64,   20,   17,   26,   20,   14,   67,   13,
       27,    9,   20,   32,   68,   26,   20,   21,   27,   62,
       57,   26,   30,   27,   21,   21,   30,   32,   57,   64,
       73,   21,   30,   32,   21,   67,   30,   27,   40,    5,
       32,   68,   40,    4,   21,   27,   40,   57,    3,   30,
       27,   21,   21,   30,   32,   57,    0,   73,   21,   30,

       32,   21,   22,   30,   36,   40,   22,   74,   36,   40,
       22,   75,   36,   40,   37,   59,   22,   37,   36,   22,
        0,   39,   37,   39,   58,   37,   39,   58,   39,   22,
        0,   36,   59,   22,   74,   36,    0,   22,   75,   36,
        0,   37,   59,   22,   37,   36,   22,   24,   39,   37,
       39,   58,   37,   39,   58,   39,   61,   63,   24,   59,
       70,   24,   66,   66,   24,   76,   63,   24,    0,   61,
       70,   69,   69,   69,   24,   69,    0,   71,    0,   77,
        0,   78,   71,   61,   63,   24,   80,   70,   24,   66,
       66,   24,   76,   63,   24,   33,   61,   70,   69,   69,

       69,   82,   69,   33,   71,   33,   77,   33,   78,   71,
       33,    0,   85,   80,    0,   81,   84,   72,    0,    0,
       72,   81,   33,   84,   86,    0,   72,   83,   82,   87,
       33,   88,   33,   72,   33,   89,   90,   33,   34,   85,
       94,   83,   81,   84,   72,   34,   34,   72,   81,   95,
       84,   86,   34,   72,   83,   34,   87,   96,   88,   92,
       72,   98,   89,   90,    0,   34,   99,   94,   83,   92,
        0,  101,   34,   34,   92,   92,   95,  102,   97,   34,
       97,   97,   34,   38,   96,  100,   92,   38,   98,  100,
       38,   38,  103,   99,  104,  105,   92,   38,  101,  106,

       38,   92,   92,    0,  102,   97,  108,   97,   97,  109,
       38,  110,  100,  111,   38,  112,  100,   38,   38,  103,
      113,  104,  105,  116,   38,  117,  106,   38,   79,  114,
       79,  118,  114,  108,   79,  119,  109,  120,  110,  115,
      111,   79,  112,  115,  122,   79,  123,  113,  124,  115,
      116,  125,  117,  126,  127,   79,  114,   79,  118,  114,
        0,   79,  119,  126,  120,  131,  115,  130,   79,    0,
      115,  122,   79,  123,  132,  124,  115,  121,  125,  121,
      126,  127,  133,  121,  128,  128,  133,  130,  121,  134,
      126,  135,  131,  136,  130,  121,  121,  135,  137,  138,

<<<<<<< HEAD
      121,  134,  121,  147,  126,  135,  121,  148,  152,  128,
      128,  121,  136,  137,  153,  138,  130,  154,  121,  121,
      133,  144,  139,  156,  133,  140,  135,  155,  155,  144,
      147,  158,  135,  159,  148,  152,  160,  161,  162,  163,
      164,  153,  165,  166,  154,  167,  169,  162,  159,  168,
      156,  170,  171,  168,  155,  155,  144,  173,  158,  174,
      159,  175,  176,  160,  161,  162,  163,  164,  177,  165,
      166,  178,  167,  169,  162,  159,  168,  172,  170,  171,
      168,  172,  180,  181,  173,  182,  174,  183,  175,  176,
      183,  184,  172,  185,  186,  177,  187,  188,  178,  189,

      190,  191,  192,  193,  172,  194,  195,  196,  172,  180,
      181,  197,  182,  198,  183,  199,  200,  183,  184,  172,
      185,  186,  201,  187,  188,  202,  189,  190,  191,  192,
      193,  203,  194,  195,  196,  202,  205,  206,  197,  207,
      198,  208,  199,  200,  209,  210,  211,  212,  213,  201,
      214,  215,  202,  217,  209,  218,  219,  220,  203,  221,
      222,  223,  202,  205,  206,  224,  207,  225,  208,  226,
      227,  209,  210,  211,  212,  213,  228,  214,  215,  229,
      217,  209,  218,  219,  220,  230,  221,  222,  223,  229,
      232,  233,  224,  234,  225,  235,  226,  227,  236,  237,

      238,  239,  241,  228,  242,  243,  229,  244,  245,  246,
      247,  248,  230,  249,  250,  251,  229,  232,  233,  252,
      234,  252,  235,  253,  255,  236,  237,  238,  239,  241,
      256,  242,  243,  257,  244,  245,  246,  247,  248,  258,
      249,  250,  251,  259,  260,  258,  252,  262,  252,  261,
      253,  255,  263,  261,  266,  267,  268,  256,  269,  270,
      257,  272,  273,  274,  277,  278,  258,  279,  280,  281,
      259,  260,  258,  282,  262,  284,  261,  285,  286,  263,
      261,  266,  267,  268,  287,  269,  270,  289,  272,  273,
      274,  277,  278,  290,  279,  280,  281,  291,  292,  293,

      282,  295,  284,  296,  285,  286,  299,  300,  301,  302,
      303,  287,  304,  305,  289,  306,  307,  308,  309,  310,
      290,  313,  314,  315,  291,  292,  293,  316,  295,  317,
      296,  318,  319,  299,  300,  301,  302,  303,  320,  304,
      305,  321,  306,  307,  308,  309,  310,  322,  313,  314,
      315,  323,  328,  330,  316,  333,  317,  334,  318,  319,
      335,  336,  323,  337,  339,  320,  340,  341,  321,  342,
      344,  345,  346,  347,  322,  348,  349,  350,  323,  328,
      330,  351,  333,  354,  334,  352,  355,  335,  336,  323,
      337,  339,  356,  340,  341,  357,  342,  344,  345,  346,

      347,  352,  348,  349,  350,  358,  359,  360,  351,  362,
      354,  363,  352,  355,  364,  365,  368,  369,  370,  356,
      372,  373,  357,  374,  375,  377,  378,  379,  352,  380,
      381,  383,  358,  359,  360,  385,  362,  387,  363,  388,
      389,  364,  365,  368,  369,  370,  390,  372,  373,  391,
      374,  375,  377,  378,  379,  392,  380,  381,  383,  393,
      395,  396,  385,  397,  387,  398,  388,  389,  399,  400,
      402,  403,  404,  390,  405,  406,  391,  407,  409,  410,
      411,  412,  392,  413,  414,  415,  393,  395,  396,  416,
      397,  417,  398,  421,  422,  399,  400,  402,  403,  404,

      423,  405,  406,  424,  407,  409,  410,  411,  412,  426,
      413,  414,  415,  427,  429,  430,  416,  432,  417,  433,
      421,  422,  434,  436,  438,  434,  439,  423,  440,  441,
      424,  442,  443,  446,  447,  449,  426,  450,  451,  452,
      427,  429,  430,  453,  432,  454,  433,  457,  458,  434,
      436,  438,  434,  439,  459,  440,  441,  460,  442,  443,
      446,  447,  449,  461,  450,  451,  452,  462,  463,  464,
      453,  465,  454,  466,  457,  458,  467,  468,  469,  471,
      472,  459,  474,  475,  460,  476,  477,  481,  482,  486,
      461,  489,  490,  491,  462,  463,  464,  492,  465,  494,

      466,  495,  496,  467,  468,  469,  471,  472,  497,  474,
      475,  499,  476,  477,  481,  482,  486,  500,  489,  490,
      491,  502,  504,  506,  492,  508,  494,  510,  495,  496,
      515,  516,  518,  519,  520,  497,  521,  523,  499,  525,
      527,  528,  529,  530,  500,  531,  532,  533,  502,  504,
      506,  534,  508,  535,  510,  536,  538,  515,  516,  518,
      519,  520,  539,  521,  523,  541,  525,  527,  528,  529,
      530,  542,  531,  532,  533,  545,  546,  547,  534,  548,
      535,  552,  536,  538,  553,  558,  562,  563,  566,  539,
      567,  568,  541,  572,  576,  577,  581,  582,  542,  583,

      587,  588,  545,  546,  547,  590,  548,  592,  552,  594,
      595,  553,  558,  562,  563,  566,  596,  567,  568,  598,
      572,  576,  577,  581,  582,  600,  583,  587,  588,  601,
      602,  604,  590,  606,  592,  608,  594,  595,  614,  618,
      619,  620,  621,  596,  622,  627,  598,  628,  630,  634,
      635,  637,  600,    0,    0,    0,  601,  602,  604,    0,
      606,    0,  608,    0,    0,  614,  618,  619,  620,  621,
        0,  622,  627,    0,  628,  630,  634,  635,  637,  640,
      640,  640,  640,  641,    0,  641,  641,  643,  643,    0,
      643,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639
    } ;

static const flex_int16_t yy_rule_linenum[185] =
=======
      139,  132,  140,  147,  121,  148,  121,  152,  153,  133,
      121,  128,  128,  133,  130,  121,  134,  154,  135,  156,
      136,  158,  121,  121,  135,  137,  138,  139,  144,  140,
      147,  160,  148,  161,  152,  153,  144,  155,  155,  159,
      162,  163,  164,  165,  154,  166,  156,  167,  158,  168,
      163,  169,  170,  171,  159,  169,  172,  174,  160,    0,
      161,  175,  176,  144,  155,  155,  159,  162,  163,  164,
      165,  173,  166,  177,  167,  173,  168,  163,  169,  170,
      171,  159,  169,  172,  174,  178,  173,  179,  175,  176,
      181,  182,  183,  184,  185,  186,  184,  187,  173,  188,

      177,  189,  173,  190,  191,  192,  193,  194,  195,  196,
      197,  198,  178,  173,  179,  199,  200,  181,  182,  183,
      184,  185,  186,  184,  187,  201,  188,  202,  189,  203,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  203,
      204,  206,  199,  200,  207,  208,  209,  210,  211,  212,
      213,  214,  201,  215,  202,  216,  203,  210,  218,  219,
      220,  221,  222,  223,  224,  225,  203,  204,  206,  226,
      227,  207,  208,  209,  210,  211,  212,  213,  214,  228,
      215,  229,  216,  230,  210,  218,  219,  220,  221,  222,
      223,  224,  225,  230,  231,  233,  226,  227,  234,  235,

      236,  237,  238,  239,  240,  242,  228,  243,  229,  244,
      230,  245,  246,  247,  248,  249,  250,  251,  252,  254,
      230,  231,  233,  256,  257,  234,  235,  236,  237,  238,
      239,  240,  242,  253,  243,  253,  244,  258,  245,  246,
      247,  248,  249,  250,  251,  252,  254,  259,  260,  261,
      256,  257,  262,  259,  263,  264,  262,  267,  268,  269,
      253,  270,  253,  271,  258,  273,  274,  275,  278,  279,
      280,  281,  282,  283,  259,  260,  261,  284,  286,  262,
      259,  263,  264,  262,  267,  268,  269,  287,  270,  288,
      271,  289,  273,  274,  275,  278,  279,  280,  281,  282,

      283,  291,  292,  293,  284,  286,  294,  295,  297,  298,
      301,  302,  303,  304,  287,  305,  288,  306,  289,  307,
      308,  309,  310,  311,  312,  315,  316,  317,  291,  292,
      293,  318,  319,  294,  295,  297,  298,  301,  302,  303,
      304,  320,  305,  321,  306,  322,  307,  308,  309,  310,
      311,  312,  315,  316,  317,  323,  324,  330,  318,  319,
      325,  332,  335,  336,  337,  338,  339,  341,  320,  342,
      321,  325,  322,  343,  344,  346,  347,  348,  349,  350,
      351,  352,  323,  324,  330,  353,  356,  325,  332,  335,
      336,  337,  338,  339,  341,  354,  342,  357,  325,  358,

      343,  344,  346,  347,  348,  349,  350,  351,  352,  359,
      360,  354,  353,  356,  361,  362,  364,  365,  366,  367,
      370,  371,  354,  372,  357,  374,  358,  375,  376,  377,
      379,  380,  381,  382,  383,  385,  359,  360,  354,  387,
      389,  361,  362,  364,  365,  366,  367,  370,  371,  390,
      372,  391,  374,  392,  375,  376,  377,  379,  380,  381,
      382,  383,  385,  393,  394,  395,  387,  389,  396,  398,
      399,  400,  401,  402,  403,  405,  390,  406,  391,  407,
      392,  408,  409,  410,  412,  413,  414,  415,  416,  417,
      393,  394,  395,  418,  419,  396,  398,  399,  400,  401,

      402,  403,  405,  420,  406,  424,  407,  425,  408,  409,
      410,  412,  413,  414,  415,  416,  417,  426,  427,  429,
      418,  419,  430,  432,  433,  435,  436,  439,  437,  441,
      420,  437,  424,  442,  425,  443,  444,  445,  446,  449,
      450,  452,  453,  454,  426,  427,  429,  455,  456,  430,
      432,  433,  435,  436,  439,  437,  441,  457,  437,  460,
      442,  461,  443,  444,  445,  446,  449,  450,  452,  453,
      454,  462,  463,  464,  455,  456,  465,  466,  467,  468,
      469,  470,  471,  472,  457,  474,  460,  475,  461,  477,
      478,  479,  480,  484,  485,  489,  491,  493,  462,  463,

      464,  494,  495,  465,  466,  467,  468,  469,  470,  471,
      472,  496,  474,  498,  475,  499,  477,  478,  479,  480,
      484,  485,  489,  491,  493,  500,  501,  503,  494,  495,
      504,  506,  508,  510,  512,  514,  519,  520,  496,  522,
      498,  523,  499,  524,  525,  527,  529,  531,  532,  533,
      534,  535,  500,  501,  503,  536,  537,  504,  506,  508,
      510,  512,  514,  519,  520,  538,  522,  539,  523,  540,
      524,  525,  527,  529,  531,  532,  533,  534,  535,  542,
      543,  545,  536,  537,  546,  549,  550,  551,  552,  556,
      557,  562,  538,  563,  539,  567,  540,  568,  571,  572,

      573,  577,  581,  582,  586,  587,  542,  543,  545,  588,
      592,  546,  549,  550,  551,  552,  556,  557,  562,  593,
      563,  595,  567,  597,  568,  571,  572,  573,  577,  581,
      582,  586,  587,  599,  600,  601,  588,  592,  603,  605,
      607,  608,  610,  612,  614,  620,  593,  624,  595,  625,
      597,  626,  627,  628,  633,  634,  636,  640,  641,  643,
      599,  600,  601,    0,    0,  603,  605,  607,  608,  610,
      612,  614,  620,    0,  624,    0,  625,    0,  626,  627,
      628,  633,  634,  636,  640,  641,  643,  646,  646,  646,
      646,  647,    0,  647,  647,  649,  649,    0,  649,  645,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645
    } ;

static const flex_int16_t yy_rule_linenum[186] =
>>>>>>> upstream/main
    {   0,
       29,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,

      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
<<<<<<< HEAD
      190,  191,  192,  193,  194,  195,  196,  197,  199,  200,
      201,  202,  203,  205,  207,  208,  213,  223,  232,  237,
      238,  239,  240,  243
=======
      190,  191,  192,  193,  194,  195,  196,  197,  198,  200,
      201,  202,  203,  204,  206,  208,  209,  214,  224,  233,
      238,  239,  240,  241,  244
>>>>>>> upstream/main
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"

#include "parser.h"
#include "parser_result.h"
#include <sstream>

static thread_local std::stringstream string_buffer;

<<<<<<< HEAD
#line 1279 "lexer.cpp"
#define YY_NO_INPUT 1

#line 1282 "lexer.cpp"
=======
#line 1282 "lexer.cpp"
#define YY_NO_INPUT 1

#line 1285 "lexer.cpp"
>>>>>>> upstream/main

#define INITIAL 0
#define SINGLE_QUOTED_STRING 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 27 "lexer.l"


<<<<<<< HEAD
#line 1636 "lexer.cpp"
=======
#line 1639 "lexer.cpp"
>>>>>>> upstream/main

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
<<<<<<< HEAD
				if ( yy_current_state >= 640 )
=======
				if ( yy_current_state >= 646 )
>>>>>>> upstream/main
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
<<<<<<< HEAD
		while ( yy_current_state != 639 );
=======
		while ( yy_current_state != 645 );
>>>>>>> upstream/main
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
<<<<<<< HEAD
			else if ( yy_act < 185 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 185 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 186 )
=======
			else if ( yy_act < 186 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 186 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 187 )
>>>>>>> upstream/main
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 29 "lexer.l"
/* ignore \t\n and space */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 31 "lexer.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "lexer.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 33 "lexer.l"
{ return ANALYZE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 34 "lexer.l"
{ return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 35 "lexer.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 36 "lexer.l"
{ return AST; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 37 "lexer.l"
{ return ASC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 38 "lexer.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 39 "lexer.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "lexer.l"
{ return BIT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 41 "lexer.l"
{ return BITMAP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 "lexer.l"
{ return BOOLEAN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 "lexer.l"
{ return BOX; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 "lexer.l"
{ return BLOB; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 "lexer.l"
{ return BLOCK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 "lexer.l"
{ return BLOCKS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 "lexer.l"
{ return BUFFER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 "lexer.l"
{ return BY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 "lexer.l"
{ return CASE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 "lexer.l"
{ return CAST; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 "lexer.l"
{ return CATALOGS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 "lexer.l"
{ return CHUNK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 "lexer.l"
{ return CIRCLE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 "lexer.l"
{ return COLLECTION; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 "lexer.l"
{ return COLUMN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 56 "lexer.l"
{ return COLUMNS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 57 "lexer.l"
{ return COMPACT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "lexer.l"
{ return CONFIGS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "lexer.l"
{ return CONFIG; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "lexer.l"
{ return COPY; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "lexer.l"
{ return CREATE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "lexer.l"
{ return CROSS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "lexer.l"
{ return DATA; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "lexer.l"
{ return DATABASE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "lexer.l"
{ return DATABASES; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "lexer.l"
{ return DATE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 67 "lexer.l"
{ return DATETIME; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 68 "lexer.l"
{ return DAY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 69 "lexer.l"
{ return DAYS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 70 "lexer.l"
{ return DISTINCT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 71 "lexer.l"
{ return DOUBLE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return DECIMAL; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return DEFAULT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return DELETE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 75 "lexer.l"
<<<<<<< HEAD
{ return DELTA; }
=======
{ return DELIMITER; }
>>>>>>> upstream/main
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 76 "lexer.l"
<<<<<<< HEAD
{ return DESC; }
=======
{ return DELTA; }
>>>>>>> upstream/main
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 77 "lexer.l"
<<<<<<< HEAD
{ return DROP; }
=======
{ return DESC; }
>>>>>>> upstream/main
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 78 "lexer.l"
<<<<<<< HEAD
{ return ELSE; }
=======
{ return DROP; }
>>>>>>> upstream/main
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 79 "lexer.l"
<<<<<<< HEAD
{ return EMBEDDING; }
=======
{ return ELSE; }
>>>>>>> upstream/main
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 80 "lexer.l"
<<<<<<< HEAD
{ return END; }
=======
{ return EMBEDDING; }
>>>>>>> upstream/main
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 81 "lexer.l"
<<<<<<< HEAD
{ return EXCEPT; }
=======
{ return END; }
>>>>>>> upstream/main
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 82 "lexer.l"
<<<<<<< HEAD
{ return EXTRACT; }
=======
{ return EXCEPT; }
>>>>>>> upstream/main
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 83 "lexer.l"
<<<<<<< HEAD
{ return EXECUTE; }
=======
{ return EXTRACT; }
>>>>>>> upstream/main
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 84 "lexer.l"
<<<<<<< HEAD
{ return EXISTS; }
=======
{ return EXECUTE; }
>>>>>>> upstream/main
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 85 "lexer.l"
<<<<<<< HEAD
{ return EXPLAIN; }
=======
{ return EXISTS; }
>>>>>>> upstream/main
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 86 "lexer.l"
<<<<<<< HEAD
{ return EXPORT; }
=======
{ return EXPLAIN; }
>>>>>>> upstream/main
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 87 "lexer.l"
<<<<<<< HEAD
{ return FALSE; }
=======
{ return EXPORT; }
>>>>>>> upstream/main
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 88 "lexer.l"
<<<<<<< HEAD
{ return FLOAT; }
=======
{ return FALSE; }
>>>>>>> upstream/main
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 89 "lexer.l"
<<<<<<< HEAD
{ return FLUSH; }
=======
{ return FLOAT; }
>>>>>>> upstream/main
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 90 "lexer.l"
<<<<<<< HEAD
{ return FORMAT; }
=======
{ return FLUSH; }
>>>>>>> upstream/main
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 91 "lexer.l"
<<<<<<< HEAD
{ return FRAGMENT; }
=======
{ return FORMAT; }
>>>>>>> upstream/main
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 92 "lexer.l"
<<<<<<< HEAD
{ return FROM; }
=======
{ return FRAGMENT; }
>>>>>>> upstream/main
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 93 "lexer.l"
<<<<<<< HEAD
{ return FULL; }
=======
{ return FROM; }
>>>>>>> upstream/main
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 94 "lexer.l"
<<<<<<< HEAD
{ return FUSION; }
=======
{ return FULL; }
>>>>>>> upstream/main
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 95 "lexer.l"
<<<<<<< HEAD
{ return GLOBAL; }
=======
{ return FUSION; }
>>>>>>> upstream/main
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 96 "lexer.l"
<<<<<<< HEAD
{ return GROUP; }
=======
{ return GLOBAL; }
>>>>>>> upstream/main
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 97 "lexer.l"
<<<<<<< HEAD
{ return HAVING; }
=======
{ return GROUP; }
>>>>>>> upstream/main
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 98 "lexer.l"
<<<<<<< HEAD
{ return HEADER; }
=======
{ return HAVING; }
>>>>>>> upstream/main
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 99 "lexer.l"
<<<<<<< HEAD
{ return HOUR; }
=======
{ return HEADER; }
>>>>>>> upstream/main
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 100 "lexer.l"
<<<<<<< HEAD
{ return HOURS; }
=======
{ return HOUR; }
>>>>>>> upstream/main
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 101 "lexer.l"
<<<<<<< HEAD
{ return HUGEINT; }
=======
{ return HOURS; }
>>>>>>> upstream/main
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 102 "lexer.l"
<<<<<<< HEAD
{ return IF; }
=======
{ return HUGEINT; }
>>>>>>> upstream/main
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 103 "lexer.l"
<<<<<<< HEAD
{ return IN; }
=======
{ return IF; }
>>>>>>> upstream/main
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 104 "lexer.l"
<<<<<<< HEAD
{ return INDEX; }
=======
{ return IN; }
>>>>>>> upstream/main
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 105 "lexer.l"
<<<<<<< HEAD
{ return INDEXES; }
=======
{ return INDEX; }
>>>>>>> upstream/main
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 106 "lexer.l"
<<<<<<< HEAD
{ return INNER; }
=======
{ return INDEXES; }
>>>>>>> upstream/main
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 107 "lexer.l"
<<<<<<< HEAD
{ return INSERT; }
=======
{ return INNER; }
>>>>>>> upstream/main
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 108 "lexer.l"
<<<<<<< HEAD
{ return INTEGER; }
=======
{ return INSERT; }
>>>>>>> upstream/main
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 109 "lexer.l"
<<<<<<< HEAD
{ return INT; }
=======
{ return INTEGER; }
>>>>>>> upstream/main
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 110 "lexer.l"
<<<<<<< HEAD
{ return INTERSECT; }
=======
{ return INT; }
>>>>>>> upstream/main
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 111 "lexer.l"
<<<<<<< HEAD
{ return INTERVAL; }
=======
{ return INTERSECT; }
>>>>>>> upstream/main
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 112 "lexer.l"
<<<<<<< HEAD
{ return INTO; }
=======
{ return INTERVAL; }
>>>>>>> upstream/main
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 113 "lexer.l"
<<<<<<< HEAD
{ return IS; }
=======
{ return INTO; }
>>>>>>> upstream/main
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 114 "lexer.l"
<<<<<<< HEAD
{ return JOIN; }
=======
{ return IS; }
>>>>>>> upstream/main
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 115 "lexer.l"
<<<<<<< HEAD
{ return KEY; }
=======
{ return JOIN; }
>>>>>>> upstream/main
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 116 "lexer.l"
<<<<<<< HEAD
{ return LEFT; }
=======
{ return KEY; }
>>>>>>> upstream/main
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 117 "lexer.l"
<<<<<<< HEAD
{ return LIKE; }
=======
{ return LEFT; }
>>>>>>> upstream/main
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 118 "lexer.l"
<<<<<<< HEAD
{ return LIMIT; }
=======
{ return LIKE; }
>>>>>>> upstream/main
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 119 "lexer.l"
<<<<<<< HEAD
{ return LINE; }
=======
{ return LIMIT; }
>>>>>>> upstream/main
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 120 "lexer.l"
<<<<<<< HEAD
{ return LOG; }
=======
{ return LINE; }
>>>>>>> upstream/main
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 121 "lexer.l"
<<<<<<< HEAD
{ return LOGS; }
=======
{ return LOG; }
>>>>>>> upstream/main
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 122 "lexer.l"
<<<<<<< HEAD
{ return LOGICAL; }
=======
{ return LOGS; }
>>>>>>> upstream/main
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 123 "lexer.l"
<<<<<<< HEAD
{ return LSEG; }
=======
{ return LOGICAL; }
>>>>>>> upstream/main
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 124 "lexer.l"
<<<<<<< HEAD
{ return MATCH; }
=======
{ return LSEG; }
>>>>>>> upstream/main
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 125 "lexer.l"
<<<<<<< HEAD
{ return MAXSIM; }
=======
{ return MATCH; }
>>>>>>> upstream/main
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 126 "lexer.l"
<<<<<<< HEAD
{ return MINUTE; }
=======
{ return MAXSIM; }
>>>>>>> upstream/main
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 127 "lexer.l"
<<<<<<< HEAD
{ return MINUTES; }
=======
{ return MINUTE; }
>>>>>>> upstream/main
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 128 "lexer.l"
<<<<<<< HEAD
{ return MONTH; }
=======
{ return MINUTES; }
>>>>>>> upstream/main
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 129 "lexer.l"
<<<<<<< HEAD
{ return MONTHS; }
=======
{ return MONTH; }
>>>>>>> upstream/main
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 130 "lexer.l"
<<<<<<< HEAD
{ return NATURAL; }
=======
{ return MONTHS; }
>>>>>>> upstream/main
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 131 "lexer.l"
<<<<<<< HEAD
{ return NULLABLE; }
=======
{ return NATURAL; }
>>>>>>> upstream/main
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 132 "lexer.l"
<<<<<<< HEAD
{ return NOT; }
=======
{ return NULLABLE; }
>>>>>>> upstream/main
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 133 "lexer.l"
<<<<<<< HEAD
{ return OFF; }
=======
{ return NOT; }
>>>>>>> upstream/main
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 134 "lexer.l"
<<<<<<< HEAD
{ return OFFSET; }
=======
{ return OFF; }
>>>>>>> upstream/main
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 135 "lexer.l"
<<<<<<< HEAD
{ return ON; }
=======
{ return OFFSET; }
>>>>>>> upstream/main
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 136 "lexer.l"
<<<<<<< HEAD
{ return OPTIMIZE; }
=======
{ return ON; }
>>>>>>> upstream/main
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 137 "lexer.l"
<<<<<<< HEAD
{ return OR; }
=======
{ return OPTIMIZE; }
>>>>>>> upstream/main
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 138 "lexer.l"
<<<<<<< HEAD
{ return ORDER; }
=======
{ return OR; }
>>>>>>> upstream/main
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 139 "lexer.l"
<<<<<<< HEAD
{ return OUTER; }
=======
{ return ORDER; }
>>>>>>> upstream/main
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 140 "lexer.l"
<<<<<<< HEAD
{ return PATH; }
=======
{ return OUTER; }
>>>>>>> upstream/main
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 141 "lexer.l"
<<<<<<< HEAD
{ return PHYSICAL; }
=======
{ return PATH; }
>>>>>>> upstream/main
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 142 "lexer.l"
<<<<<<< HEAD
{ return PIPELINE; }
=======
{ return PHYSICAL; }
>>>>>>> upstream/main
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 143 "lexer.l"
<<<<<<< HEAD
{ return POINT; }
=======
{ return PIPELINE; }
>>>>>>> upstream/main
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 144 "lexer.l"
<<<<<<< HEAD
{ return POLYGON; }
=======
{ return POINT; }
>>>>>>> upstream/main
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 145 "lexer.l"
<<<<<<< HEAD
{ return PREPARE; }
=======
{ return POLYGON; }
>>>>>>> upstream/main
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 146 "lexer.l"
<<<<<<< HEAD
{ return PRIMARY; }
=======
{ return PREPARE; }
>>>>>>> upstream/main
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 147 "lexer.l"
<<<<<<< HEAD
{ return PROFILE; }
=======
{ return PRIMARY; }
>>>>>>> upstream/main
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 148 "lexer.l"
<<<<<<< HEAD
{ return PROFILES; }
=======
{ return PROFILE; }
>>>>>>> upstream/main
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 149 "lexer.l"
<<<<<<< HEAD
{ return PROPERTIES; }
=======
{ return PROFILES; }
>>>>>>> upstream/main
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 150 "lexer.l"
<<<<<<< HEAD
{ return QUERIES; }
=======
{ return PROPERTIES; }
>>>>>>> upstream/main
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 151 "lexer.l"
<<<<<<< HEAD
{ return QUERY; }
=======
{ return QUERIES; }
>>>>>>> upstream/main
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 152 "lexer.l"
<<<<<<< HEAD
{ return RAW; }
=======
{ return QUERY; }
>>>>>>> upstream/main
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 153 "lexer.l"
<<<<<<< HEAD
{ return REAL; }
=======
{ return RAW; }
>>>>>>> upstream/main
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 154 "lexer.l"
<<<<<<< HEAD
{ return RIGHT; }
=======
{ return REAL; }
>>>>>>> upstream/main
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 155 "lexer.l"
<<<<<<< HEAD
{ return ROWLIMIT; }
=======
{ return RIGHT; }
>>>>>>> upstream/main
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 156 "lexer.l"
<<<<<<< HEAD
{ return SEARCH; }
=======
{ return ROWLIMIT; }
>>>>>>> upstream/main
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 157 "lexer.l"
<<<<<<< HEAD
{ return SECOND; }
=======
{ return SEARCH; }
>>>>>>> upstream/main
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 158 "lexer.l"
<<<<<<< HEAD
{ return SECONDS; }
=======
{ return SECOND; }
>>>>>>> upstream/main
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 159 "lexer.l"
<<<<<<< HEAD
{ return SELECT; }
=======
{ return SECONDS; }
>>>>>>> upstream/main
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 160 "lexer.l"
<<<<<<< HEAD
{ return SESSION; }
=======
{ return SELECT; }
>>>>>>> upstream/main
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 161 "lexer.l"
<<<<<<< HEAD
{ return SET; }
=======
{ return SESSION; }
>>>>>>> upstream/main
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 162 "lexer.l"
<<<<<<< HEAD
{ return SEGMENT; }
=======
{ return SET; }
>>>>>>> upstream/main
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 163 "lexer.l"
<<<<<<< HEAD
{ return SEGMENTS; }
=======
{ return SEGMENT; }
>>>>>>> upstream/main
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 164 "lexer.l"
<<<<<<< HEAD
{ return SHOW; }
=======
{ return SEGMENTS; }
>>>>>>> upstream/main
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 165 "lexer.l"
<<<<<<< HEAD
{ return SMALLINT; }
=======
{ return SHOW; }
>>>>>>> upstream/main
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 166 "lexer.l"
<<<<<<< HEAD
{ return SPARSE; }
=======
{ return SMALLINT; }
>>>>>>> upstream/main
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 167 "lexer.l"
<<<<<<< HEAD
{ return TABLE; }
=======
{ return SPARSE; }
>>>>>>> upstream/main
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 168 "lexer.l"
<<<<<<< HEAD
{ return TABLES; }
=======
{ return TABLE; }
>>>>>>> upstream/main
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 169 "lexer.l"
<<<<<<< HEAD
{ return TENSOR; }
=======
{ return TABLES; }
>>>>>>> upstream/main
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 170 "lexer.l"
<<<<<<< HEAD
{ return TENSORARRAY; }
=======
{ return TENSOR; }
>>>>>>> upstream/main
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 171 "lexer.l"
<<<<<<< HEAD
{ return TEXT; }
=======
{ return TENSORARRAY; }
>>>>>>> upstream/main
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 172 "lexer.l"
<<<<<<< HEAD
{ return THEN; }
=======
{ return TEXT; }
>>>>>>> upstream/main
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 173 "lexer.l"
<<<<<<< HEAD
{ return TIME; }
=======
{ return THEN; }
>>>>>>> upstream/main
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 174 "lexer.l"
<<<<<<< HEAD
{ return TIMESTAMP; }
=======
{ return TIME; }
>>>>>>> upstream/main
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 175 "lexer.l"
<<<<<<< HEAD
{ return TINYINT; }
=======
{ return TIMESTAMP; }
>>>>>>> upstream/main
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 176 "lexer.l"
<<<<<<< HEAD
{ return TO; }
=======
{ return TINYINT; }
>>>>>>> upstream/main
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 177 "lexer.l"
<<<<<<< HEAD
{ return TRANSACTION; }
=======
{ return TO; }
>>>>>>> upstream/main
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 178 "lexer.l"
<<<<<<< HEAD
{ return TRANSACTIONS; }
=======
{ return TRANSACTION; }
>>>>>>> upstream/main
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 179 "lexer.l"
<<<<<<< HEAD
{ return TRUE; }
=======
{ return TRANSACTIONS; }
>>>>>>> upstream/main
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 180 "lexer.l"
<<<<<<< HEAD
{ return UNION; }
=======
{ return TRUE; }
>>>>>>> upstream/main
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 181 "lexer.l"
<<<<<<< HEAD
{ return UNIQUE; }
=======
{ return UNION; }
>>>>>>> upstream/main
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 182 "lexer.l"
<<<<<<< HEAD
{ return USING; }
=======
{ return UNIQUE; }
>>>>>>> upstream/main
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 183 "lexer.l"
<<<<<<< HEAD
{ return UPDATE; }
=======
{ return USING; }
>>>>>>> upstream/main
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 184 "lexer.l"
<<<<<<< HEAD
{ return UUID; }
=======
{ return UPDATE; }
>>>>>>> upstream/main
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 185 "lexer.l"
<<<<<<< HEAD
{ return USE; }
=======
{ return UUID; }
>>>>>>> upstream/main
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 186 "lexer.l"
<<<<<<< HEAD
{ return VALUES; }
=======
{ return USE; }
>>>>>>> upstream/main
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 187 "lexer.l"
<<<<<<< HEAD
{ return VARIABLE; }
=======
{ return VALUES; }
>>>>>>> upstream/main
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 188 "lexer.l"
<<<<<<< HEAD
{ return VARIABLES; }
=======
{ return VARIABLE; }
>>>>>>> upstream/main
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 189 "lexer.l"
<<<<<<< HEAD
{ return VARCHAR; }
=======
{ return VARIABLES; }
>>>>>>> upstream/main
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 190 "lexer.l"
<<<<<<< HEAD
{ return VECTOR; }
=======
{ return VARCHAR; }
>>>>>>> upstream/main
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 191 "lexer.l"
<<<<<<< HEAD
{ return VIEW; }
=======
{ return VECTOR; }
>>>>>>> upstream/main
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 192 "lexer.l"
<<<<<<< HEAD
{ return VIEWS; }
=======
{ return VIEW; }
>>>>>>> upstream/main
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 193 "lexer.l"
<<<<<<< HEAD
{ return WHEN; }
=======
{ return VIEWS; }
>>>>>>> upstream/main
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 194 "lexer.l"
<<<<<<< HEAD
{ return WHERE; }
=======
{ return WHEN; }
>>>>>>> upstream/main
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 195 "lexer.l"
<<<<<<< HEAD
{ return WITH; }
=======
{ return WHERE; }
>>>>>>> upstream/main
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 196 "lexer.l"
<<<<<<< HEAD
{ return YEAR; }
=======
{ return WITH; }
>>>>>>> upstream/main
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 197 "lexer.l"
<<<<<<< HEAD
{ return YEARS; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return EQUAL; }
=======
{ return YEAR; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return YEARS; }
>>>>>>> upstream/main
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 200 "lexer.l"
<<<<<<< HEAD
{ return NOT_EQ; }
=======
{ return EQUAL; }
>>>>>>> upstream/main
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return NOT_EQ; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 202 "lexer.l"
<<<<<<< HEAD
{ return LESS_EQ; }
=======
{ return NOT_EQ; }
>>>>>>> upstream/main
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 203 "lexer.l"
<<<<<<< HEAD
{ return GREATER_EQ; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 175:
#line 208 "lexer.l"
case 176:
YY_RULE_SETUP
#line 208 "lexer.l"
=======
{ return LESS_EQ; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return GREATER_EQ; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 176:
#line 209 "lexer.l"
case 177:
YY_RULE_SETUP
#line 209 "lexer.l"
>>>>>>> upstream/main
{
    yylval->double_value = atof(yytext);
    return DOUBLE_VALUE;
}
	YY_BREAK
<<<<<<< HEAD
case 177:
YY_RULE_SETUP
#line 213 "lexer.l"
=======
case 178:
YY_RULE_SETUP
#line 214 "lexer.l"
>>>>>>> upstream/main
{
    errno = 0;
    yylval->long_value = strtoll(yytext, nullptr, 0);
    if (errno) {
        return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
        return 0;
    }
    return LONG_VALUE;
}
	YY_BREAK
<<<<<<< HEAD
case 178:
YY_RULE_SETUP
#line 223 "lexer.l"
=======
case 179:
YY_RULE_SETUP
#line 224 "lexer.l"
>>>>>>> upstream/main
{
    // total length - 2 of quota + 1 null char
    long str_len = strlen(yytext) - 1;
    yylval->str_value = (char*)malloc(str_len);
    memset(yylval->str_value, 0, str_len);
    memcpy(yylval->str_value, (char*)(yytext + 1), str_len - 1);
    return IDENTIFIER;
}
	YY_BREAK
<<<<<<< HEAD
case 179:
YY_RULE_SETUP
#line 232 "lexer.l"
=======
case 180:
YY_RULE_SETUP
#line 233 "lexer.l"
>>>>>>> upstream/main
{
    yylval->str_value = strdup(yytext);
    return IDENTIFIER;
}
	YY_BREAK
<<<<<<< HEAD
case 180:
YY_RULE_SETUP
#line 237 "lexer.l"
{ BEGIN SINGLE_QUOTED_STRING; string_buffer.clear(); string_buffer.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 238 "lexer.l"
{ string_buffer << '\''; }
=======
case 181:
YY_RULE_SETUP
#line 238 "lexer.l"
{ BEGIN SINGLE_QUOTED_STRING; string_buffer.clear(); string_buffer.str(""); }  // Clear strbuf manually, see #170
>>>>>>> upstream/main
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 239 "lexer.l"
<<<<<<< HEAD
{ string_buffer << yytext; }
=======
{ string_buffer << '\''; }
>>>>>>> upstream/main
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 240 "lexer.l"
<<<<<<< HEAD
{ BEGIN INITIAL; yylval->str_value = strdup(string_buffer.str().c_str()); return STRING; }
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTED_STRING):
#line 241 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 243 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 245 "lexer.l"
ECHO;
	YY_BREAK
#line 2661 "lexer.cpp"
=======
{ string_buffer << yytext; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 241 "lexer.l"
{ BEGIN INITIAL; yylval->str_value = strdup(string_buffer.str().c_str()); return STRING; }
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTED_STRING):
#line 242 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 244 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 246 "lexer.l"
ECHO;
	YY_BREAK
#line 2669 "lexer.cpp"
>>>>>>> upstream/main
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
<<<<<<< HEAD
			if ( yy_current_state >= 640 )
=======
			if ( yy_current_state >= 646 )
>>>>>>> upstream/main
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
<<<<<<< HEAD
		if ( yy_current_state >= 640 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 639);
=======
		if ( yy_current_state >= 646 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 645);
>>>>>>> upstream/main

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

<<<<<<< HEAD
#line 245 "lexer.l"
=======
#line 246 "lexer.l"
>>>>>>> upstream/main


int yyerror(const char *msg) {
    fprintf(stderr, "[Why here?] %s\n",msg); return 0;
}

